try:
    from getpaid.hurry.workflow import interfaces as iworkflow
    from getpaid.hurry.workflow import workflow
except:
    from hurry.workflow import interfaces as iworkflow
    from hurry.workflow import workflow

try:
    from AccessControl import getSecurityManager
except ImportError:
    getSecurityManager = None

from getpaid.core.order import OrderWorkflowRecord
from getpaid.core.interfaces import workflow_states, IOrder, IPaymentProcessor, IDefaultFinanceWorkflow
from getpaid.core import interfaces as igpc
from getpaid.core.workflow.order import create_finance_workflow as base_create_finance_workflow, FulfillmentWorkflowAdapter, ShippableFulfillmentWorkflowAdapter
from zope import component

#ADD Conditions to process-order transition

def CheckNoIncomplete( wf, order ):
    for item in order.shopping_cart.values():
        if item.fulfillment_state == 'INCOMPLETE':
            return False
    return True

from getpaid.core.workflow.order import create_fulfillment_workflow as base_create_fulfillment_workflow

def create_fulfillment_workflow( ):
    fs = workflow_states.order.fulfillment
    transitions = base_create_fulfillment_workflow()
    add = transitions.append
    
    add( workflow.Transition( transition_id = 'make-pharma-pending',
                              title = _(u'Pharma pending on validation'),
                              trigger = iworkflow.AUTOMATIC,
                              condition = CheckNoIncomplete,
                              source = fs.NEW,
                              destination = 'PHARMA_PENDING' ))
    
    add( workflow.Transition( transition_id = 'pharma-pending-validate',
                              title = _(u'Validate pharma pending'),
                              source = 'PHARMA_PENDING',
                              destination = fs.NEW ))
    return transitions

class FulfillmentWorkflow( workflow.Workflow ):
    interface.implements( iworkflow.IWorkflow )
    def __init__( self ):
        super( FulfillmentWorkflow, self).__init__( create_fulfillment_workflow())

FulfillmentWorkflowAdapter, FulfillmentState, baseFulfillmentInfo = workflow.ParallelWorkflow(
    workflow.AdaptedWorkflow( FulfillmentWorkflow() ),
    workflow_states.order.fulfillment.name,
    )

class FulfillmentInfo(SolgemaWorkflowInfo, baseFulfillmentInfo):
    pass
